package pl.droidsonroids.gradle.jacoco.testkit

import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.WriteProperties
import org.gradle.testing.jacoco.plugins.JacocoTaskExtension

open class JacocoTestKitExtension(private val project: Project) {

    val jacocoRuntimePathProvider: Provider<String> =
        project.provider { project.configurations.getByName(Configurations.jacocoRuntime).asPath }

    fun applyTo(configurationRuntime: String, taskProvider: TaskProvider<Task>) {
        with(project) {
            val jacocoTestKitPropertiesTask = tasks.register(
                generatePropertiesTaskName(taskProvider.name),
                WriteProperties::class.java,
            ) {
                it.group = "verification"
                it.description = "Generates gradle.properties with JaCoCo java agent for TestKit"
                it.comment = "Generated by pl.droidsonroids.jacoco.testkit"

                it.destinationFile.set(layout.buildDirectory.file("testkit/${taskProvider.name}/testkit-gradle.properties"))

                it.property(
                    "org.gradle.jvmargs",
                    taskProvider.map { task -> task.extensions.getByType(JacocoTaskExtension::class.java).destinationFile!! }
                        .map { destFile -> "\"-javaagent:${jacocoRuntimePathProvider.get()}=destfile=${destFile}\"" },
                )
            }

            dependencies.add(configurationRuntime, files(testKitDir(taskProvider.name)))
            taskProvider.configure { it.dependsOn(jacocoTestKitPropertiesTask) }
        }
    }

    fun applyTo(configurationRuntime: String, task: Task) =
        applyTo(configurationRuntime, project.provider { task } as TaskProvider<Task>)
}
